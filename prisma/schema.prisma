// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model FPLPlayer {
  id                                String             @id @default(uuid())
  player_id                         Int @unique // the player_id = element from the JSON
  season_id                         String
  first_name                        String
  second_name                       String
  team                              Int // this is the team id. will change across seasons
  web_name                          String
  team_code                         Int
  element_type                      Int
  total_points                      Int
  goals_scored                      Int
  assists                           Int
  expected_goals                    Float
  expected_assists                  Float
  expected_goal_involvements        Float
  expected_goals_per_90             Float
  expected_assists_per_90           Float
  expected_goal_involvements_per_90 Float
  minutes                           Int
  FPLGameweekPicks                  FPLGameweekPicks[]

  fpl_season                FPLSeason                @relation(fields: [season_id], references: [id])
  fpl_gameweek_player_stats FPLGameweekPlayerStats[]
  fpl_player_team           FPLPlayerTeam            @relation(fields: [team_code], references: [code])
}

model FPLPlayerTeam {
  id         String @id @default(uuid())
  season_id  String
  code       Int    @unique // this is the actual team code that likely reamins across seasons
  team_id    Int // this is the id (1-20). Usually used for sorting
  name       String
  short_name String
  strength   Int

  fpl_season    FPLSeason     @relation(fields: [season_id], references: [id])
  home_fixtures FPLFixtures[] @relation("home_team")
  away_fixtures FPLFixtures[] @relation("away_team")
  FPLPlayer     FPLPlayer[]
}

model FPLFixtures {
  id                String  @id @default(uuid())
  season_id         String
  code              Int @unique
  fixture_id        Int
  finished          Boolean
  team_h_id         String
  team_a_id         String
  event             Int?
  team_h_score      Int?
  team_a_score      Int?
  team_h_difficulty Int
  team_a_difficulty Int

  fpl_season FPLSeason     @relation(fields: [season_id], references: [id])
  fpl_team_h FPLPlayerTeam @relation("home_team", fields: [team_h_id], references: [id])
  fpl_team_a FPLPlayerTeam @relation("away_team", fields: [team_a_id], references: [id])
}

model FPLGameweekPicks {
  id              String    @id @default(uuid())
  fpl_team_id     String
  fpl_player_id   String
  gameweek        Int
  position        Int
  multiplier      Int
  is_captain      Boolean
  is_vice_captain Boolean
  // fpl team id is foreign key in FPL TEAM
  fpl_team        FPLTeam   @relation(fields: [fpl_team_id], references: [id])
  fpl_player      FPLPlayer @relation(fields: [fpl_player_id], references: [id])

  @@unique([fpl_team_id, gameweek, position])
}

// store fpl player stats on a gameweek level that have 
// been played so far
model FPLGameweekPlayerStats {
  id               String    @id @default(uuid())
  fpl_player_id    String
  fixture_id       Int
  gameweek         Int
  total_points     Int
  goals_scored     Int
  assists          Int
  expected_goals   Float
  expected_assists Float
  value            Int
  fpl_player       FPLPlayer @relation(fields: [fpl_player_id], references: [id])

  @@unique([fpl_player_id, fixture_id])
}

model FPLTeam {
  id            String @id @default(uuid())
  name          String
  team_id       Int
  fpl_season_id String

  fpl_gameweek_picks FPLGameweekPicks[]
  fpl_season         FPLSeason          @relation(fields: [fpl_season_id], references: [id])
}

model FPLSeason {
  id              String          @id @default(uuid())
  year            Int
  fpl_teams       FPLTeam[]
  fpl_players     FPLPlayer[]
  fpl_player_team FPLPlayerTeam[]
  fpl_fixtures    FPLFixtures[]
}

model FPLDrafts {
  id                String              @id @default(uuid())
  name              String
  description       String?
  fpl_team_id       String
  base_gameweek     Int
  FPLDraftTransfers FPLDraftTransfers[]
}

model FPLDraftTransfers {
  id            String    @id @default(uuid())
  fpl_draft_id  String
  player_in_id  Int
  player_out_id Int
  gameweek      Int
  fpl_draft     FPLDrafts @relation(fields: [fpl_draft_id], references: [id], onDelete: Cascade)
}
